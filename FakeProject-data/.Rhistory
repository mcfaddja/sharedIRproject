ylab="Density", main="Comparison of t Distributions")
qbinom(0.10, 180, 0.18)
pbinom(26, 180, 0.18)
pbinom(18, 180, 0.18)
pbinom(26, 180, 0.18)
pnorm(20,37.5,17.12)
pnorm(10,37.5,17.12)
pnorm(20,37.5,17.12, lower.tail = FALSE)
pnorm(10,37.5,17.12, lower.tail = FALSE)
pnorm(10,37.5,17.12, lower.tail = FALSE)-pnorm(20,37.5,17.12)
1-pnorm(20,37.5,17.12)-pnorm(10,37.5,17.12)
pnorm(20,37.5,17.12)-pnorm(10,37.5,17.12)
100 * ( pnorm(20, 37.5, 17.12) - pnorm( 10, 37.5, 17.12) )
pnorm(10, 37.5, 17.12)
pnorm(10,37.5,17.12, lower.tail = FALSE)
qnorm( pnorm(10, 37.5, 17.12) + 0.50, 37.5, 17.12)
ppois(0, 3)
for(n in c(0,1,2,3,4,5,6,7)) {x = sum(x,  ppois(n, lambda) * ppois(7-n, lambda)}
for(n in c(0,1,2,3,4,5,6,7)) {x = sum(x,  ppois(n, lambda) * ppois(7-n, lambda))}
x=0
lambda=3
for(n in c(0,1,2,3,4,5,6,7)) {x = sum(x,  ppois(n, lambda) * ppois(7-n, lambda))}
x
for(n in c(0,1,2,3,4,5,6,7)) {for(m in 0:n) {x = sum(x,  ppois(m, lambda) * ppois(m-n, lambda))}}
lambda=3
x=0
for(n in c(0,1,2,3,4,5,6,7)) {for(m in 0:n) {x = sum(x,  ppois(m, lambda) * ppois(m-n, lambda))}}
x
subset(iris, Species == 'versicolor')
subset(iris, Species == 'versicolor')> shapiro.test(iris$Sepal.Length)
qqnorm(iris$Sepal.Length)
qqline(iris$Sepal.Length)
qqnorm(iris$Sepal.Length)
qqline(iris$Sepal.Length)
qqline(pnorm())
x <- seq(0, 100, length=101)
qqline(pnorm(x,0,1))
qqline(pnorm(x,0,1))
qqnorm(pnorm(x,0,1))
qqline(pnorm(x,0,1))
shapiro.test(pnorm(x,0,1)
)
shapiro.test(iris$Sepal.Length)
shapiro.test(x)
qqnorm(x)
qqline(x)
qqline(x)
x
data <- rpois(1000, 3)
data
shapiro.test(data)
qqline(data)
qqline(data)
qqnorm(x)
qqnorm(data)
qqnorm(data)
qqline(data)
data <- rpois(1000, 10)
qqnorm(x)
data <- rpois(100, 10)
qqnorm(data)
qqline(data)
data <- rpois(10000, 1000)
qqnorm(data)
qqline(data)
data <- rpois(10, 1000)
qqnorm(data)
qqline(data)
data*data
data
data2=c(data*data*data, data*data, data)
qqnorm(data2)
qqline(data2)
shapiro.test(data2)
shapiro.test(iris$Sepal.Length)
shapiro.test(x)
shapiro.test(data)
> qqnorm(iris$Sepal.Length)
> qqline(iris$Sepal.Length)
qqnorm(iris$Sepal.Length)
qqline(iris$Sepal.Length)
subset(iris, Species == 'versicolor')
dataB <- subset(iris, Species == 'versicolor')
dataB
dataB
dataB <- subset(iris, Species == 'versicolor')
mean(dataB)
mean(dataB$Petal.Length)
sd(dataB$Petal.Length)
quantile(dataB$Petal.Length, 0.25)
qnorm(0.25, mean(dataB$Petal.Length), sd(dataB$Petal.Length))
densityDataB <- density(dataB)
densityDataB <- density(dataB$Petal.Length)
dataC <- subset(iris, Species == 'versicolor')
densityDataC <- density(dataC$Petal.Length)
df <- approxfun(density(dataC$Petal.Length))
df
eval(df,4)
density()
lengthC <- dataC$Petal.Length
length(lengthC[4>=lengthC])/length(lengthC)
dataC <- subset(iris, Species == 'versicolor')
lengthC <- dataC$Petal.Length
length( lengthC[4 >= lengthC] ) / length( lengthC )
mean(lengthC)
sd(lengthC)
pnorm(4, mean(lengthC), sd(lengthC))
dataD <- subset(iris, Species == 'Setosa')
lengthD <- dataD$Petal.Length
length( lengthD[4 >= lengthD] ) / length( lengthD )
View(dataD)
dataD <- subset(iris, Species == 'setosa')
lengthD <- dataD$Petal.Length
length( lengthD[4 >= lengthD] ) / length( lengthD )
View(dataD)
View(dataD)
length( lengthD[4 >= lengthD] ) / length( lengthD )
mean(lengthD)
sd(lengthD)
pnorm(4, mean(lengthD), sd(lengthD))
view(lengthC)
view(lengthC)
View(dataD)
View(dataC)
lengthD <- dataD$Petal.Length
pnorm(4, mean(lengthD), sd(lengthD))
1-pnorm(4, mean(lengthC), sd(lengthC))
1- length( lengthC[4 >= lengthC] ) / length( lengthC )
1-length( lengthD[4 >= lengthD] ) / length( lengthD )
dataC <- subset(iris, Species == 'virginica')
lengthC <- dataC$Petal.Length
length( lengthD[4 >= lengthD] ) / length( lengthD )
View(dataC)
View(dataC)
length( lengthC[4 >= lengthC] ) / length( lengthC )
1-length( lengthC[4 >= lengthC] ) / length( lengthC )
mean(lengthC)
sd(lengthC)
1-pnorm(4, mean(lengthC), sd(lengthC))
dataE <- subset(iris, Species == 'virginica')
View(dataE)
View(dataE)
dataE <- subset(iris, Species == 'virginica')
lenEsep <- dataE$Sepal.Length
widEsep <- dataE$Sepal.Width
length( lenEsep[lenEsep >= 8 | lenEsep <= 4.8] ) / length( lenEsep )
length( lenEsep[lenEsep >= 8 || lenEsep <= 4.8] ) / length( lenEsep )
length( widEsep[widEsep >= 8 || widEsep <= 4.8] ) / length( widEsep )
dataE <- subset(iris, Species == 'virginica')
lenEsep <- dataE$Sepal.Length
widEsep <- dataE$Sepal.Width
length( lenEsep[lenEsep >= 8 || lenEsep <= 4.8] ) / length( lenEsep )
length( widEsep[widEsep >= 8 || widEsep <= 4.8] ) / length( widEsep )
mean(lenEsep)
sd(lenEsep)
pnorm(4.8, mean(lenEsep), sd(lenEsep)) + pnorm(8, mean(lenEsep), sd(lenEsep), lower.tail = FALSE)
mean(widEsep)
sd(widEsep)
pnorm(4.8, mean(widEsep), sd(widEsep)) + pnorm(8, mean(widEsep), sd(widEsep), lower.tail = FALSE)
dataA <- iris$Sepal.Length
data0 <- iris
View(data0)
save.image("~/Documents/School/TCSS 551 - Big Data Analytics/Assignments/Homework-1/iris-Sepal Length data.RData")
write.csv(data0, file="iris-Sepal Length-data.csv")
write.csv(dataA, file="iris-Sepal Length-data.csv")
dataB <- subset(iris, Species == ’versicolor’)
dataB <- subset(iris, Species == ’versicolor’)
iris
dataB <- subset(iris, Species == ’versicolor’)
dataB <- subset(iris, Species == ’versicolor’)
dataB <- subset(iris, Species == ’versicolor’)
dataB <- subset(iris, Species == 'versicolor')
write.csv(dataB$Petal.Length, file="iris-versicolor-Petal Length-data.csv")
dataC <- subset(iris, Species == 'virginica')
write.csv(dataC$Petal.Length, file="iris-virginica-Petal Length-data.csv")
dataD <- subset(iris, Species == 'setosa')
write.csv(dataD$Petal.Length, file="iris-setosa-Petal Length-data.csv")
dataE <- subset(iris, Species == 'virginica')
lenEsep <- dataE$Sepal.Length
widEsep <- dataE$Sepal.Width
write.csv(dataE$Sepal.Length, file="iris-virginica-Sepal Length-data.csv")
write.csv(dataE$Sepal.Width, file="iris-virginica-Sepal Width-data.csv")
load("~/Downloads/blood_pressure.txt")
load("~/Downloads/blood_pressure.txt")
load("~/Downloads/blood_pressure.txt")
read.table("/Users/jamster/Downloads/blood_pressure.txt", header = TRUE) -> abp
head(abp)
View(abp)
View(abp)
abp2 <- abp[-c(2),]
head(abp2)
abline(lm(abp2$blood_pressure~apb2$age))
abline(lm(abp2$blood_pressure~abp2$age))
plot(abp2$blood_pressure~abp2$age)
abline(lm(abp2$blood_pressure~abp2$age))
summary(lm(abp2$blood_pressure~abp2$age))
pnorm(50, 45, 10)
pnorm(50, 55, 40)
clearIO
clear()
qnorm(0.025)
45 qnorm(0.025)
45 + qnorm(0.025)*(10/sqrt(50))
45 - qnorm(0.025)*(10/sqrt(50))
55 + qnorm(0.025)*(40/sqrt(50))
55 - qnorm(0.025)*(40/sqrt(50))
x <- seq(-10,10, length=10001)
fx <- dnorm(x, 45, 10)
gx <- dnorm(x, 55, 40)
plot(x, fx, type = "1")
plot(x, fx, type =1)
plot(x, fx, type="1")
plot(x, fx)
x <- seq(-10,90, length=10001)
fx <- dnorm(x, 45, 10)
gx <- dnorm(x, 55, 40)
plot(x, fx)
plot(x, gx)
plot(x, gx)
3.8 + qnorm(0.025)*(0.26/sqrt(2000))
3.8 - qnorm(0.025)*(0.26/sqrt(2000))
3.8 + qnorm(0.005)*(0.26/sqrt(2000))
3.8 - qnorm(0.005)*(0.26/sqrt(2000))
pnorm(3.785025, 3.8, 0.26) - pnorm(3.814975, 3.8, 0.26)
(qnorm(0.005)*(0.26/sqrt(2000)) - qnorm(0.005)*(0.26/sqrt(2000)))/2
(qnorm(0.005)*(0.26/sqrt(2000)) + qnorm(0.005)*(0.26/sqrt(2000)))/2
-(qnorm(0.005)*(0.26/sqrt(2000)) + qnorm(0.005)*(0.26/sqrt(2000)))/2
pnorm(4, 3.8, 0.26)
(4-3.8)/(0.26/sqrt(2000))
4.762/2
pt(34.4,95)
pt(34.4,99)
pt(34.4,99)
qnorm(34.5)
12.17 + qnorm(0.025)*(4.02/sqrt(37129))
12.17 - qnorm(0.025)*(4.02/sqrt(37129))
12.92 + qnorm(0.025)*(4.12/sqrt(36918))
12.92 - qnorm(0.025)*(4.12/sqrt(36918))
qt(0.025,36918+37129-2)
qt(0.005,36918+37129-2)
2*pt(1-20.5437,36918+37129-2)
2*pt(-20.5437,36918+37129-2)
2*pt(20.5437-1,36918+37129-2)
2*pt(-20.5437,36918+37129-2)
2*pt(1-20.5437,36918+37129-2)
mydata = read.table("clipboard", header=TRUE, sep="\t")
"mydata = read.table("/Users/jamster/Downloads/MidTerm-Prob5-data.txt", header=TRUE, sep="\t")
mydata = read.table("/Users/jamster/Downloads/MidTerm-Prob5-data.txt", header=TRUE, sep="\t")
View(mydata)
View(mydata)
modelA <- lm(mydata$Length~mydata$Pollutant.A)
summary(modelA)
modelB <- lm(mydata$Length~mydata$Pollutant.B)
summary(modelB)
plot(mydata$Pollutant.A,mydata$Length)
plot(mydata$Length,mydata$Pollutant.A)
plot(mydata$Length,mydata$Pollutant.B)
myDataA <- mydata[ -c()]
mydata = read.table("/Users/jamster/Downloads/MidTerm-Prob5-data.txt", header=TRUE, sep="\t")
modelA <- lm(mydata$Length~mydata$Pollutant.A)
modelB <- lm(mydata$Length~mydata$Pollutant.B)
summary(modelA)
summary(modelB)
plot(mydata$Length,mydata$Pollutant.A)
plot(mydata$Pollutant.A,mydata$Length)
plot(mydata$Pollutant.B,mydata$Length)
csvIN = csv.read("/Users/jamster/Downloads/tweets.csv")
csvIN = read.csv("/Users/jamster/Downloads/tweets.csv")
genuine <- csvIN$text
test <- genuine[2]
test <- genuine[c(2_]
test <- genuine[c(2)]
test = genuine[c(2)]
View(csvIN)
load("/Users/jamster/Desktop/temp.RData")
load("~/Desktop/IR-Project/FakeProject-data/R-Studio - SentimentAnalysis package.RData")
library(tidytext)
sentiments
fileName = 'datasetsFULLcsv/fakeFollowersCSV/tweets.csv'
setwd("~/Desktop/IR-Project/FakeProject-data")
fakeCSV = read.csv(fileName)
fakeTweets <- data.frame(userID = fakeCSV$user_id, id = fakeCSV$id, text = fakeCSV$text, realFAKEcat = "fake")
# remove web URLs
fakeTweets <- data.frame(userID = fakeTweets$userID, id = fakeTweets$id, text = gsub("http[[:alnum:][:punct:]]*", "", fakeTweets$text))
# remove twitter handles (@<username>)
fakeTweets <- data.frame(userID = fakeTweets$userID, id = fakeTweets$id, text = gsub("#[[:alnum:][:punct:]]*", "", fakeTweets$text))
# remove hashtags (#<hashtag name>)
fakeTweets <- data.frame(userID = fakeTweets$userID, id = fakeTweets$id, text = gsub("@[[:alnum:][:punct:]]*", "", fakeTweets$text))
# remove punctuation
fakeTweets <- data.frame(userID = fakeTweets$userID, id = fakeTweets$id, text = gsub('[[:punct:] ]+', ' ', fakeTweets$text))
# remove numbers
fakeTweets <- data.frame(userID = fakeTweets$userID, id = fakeTweets$id, text = gsub("[0-9]", "", fakeTweets$text))
# convert to lowercase
fakeTweets <- data.frame(userID = fakeTweets$userID, id = fakeTweets$id, text = tolower(fakeTweets$text))
View(fakeCSV)
library(dplyr)
library(tidytext)
fakeTweets <- data_frame(userID = fakeTweets$userID, id = fakeTweets$id, text = as.character(fakeTweets$text))
fakeTweets <- data_frame(userID = fakeTweets$userID, id = fakeTweets$id, text = as.character(fakeTweets$text))
fakeTweetsTOKENS <- fakeTweets %>%
unnest_tokens(word, text)
data(stop_words)
fakeTweetsTOKENS <- fakeTweetsTOKENS %>%
anti_join(stop_words)
nrcWORDS <- get_sentiments("nrc")
nrcEMOTIONS <- unique(nrcWORDS$sentiment)
for (emotion in nrcEMOTIONS){
fakeTweetsNRCsentiment0 <- inner_join(fakeTweetsTOKENS, filter(nrcWORDS, sentiment == emotion))
fakeTweetsNRCsentiment <- full_join(fakeTweetsNRCsentiment, fakeTweetsNRCsentiment0)
}
#fakeTweetsNRCsentiment
fakeTweetsNRCsentiment <- data.frame()
for (emotion in nrcEMOTIONS){
fakeTweetsNRCsentiment0 <- inner_join(fakeTweetsTOKENS, filter(nrcWORDS, sentiment == emotion))
fakeTweetsNRCsentiment <- full_join(fakeTweetsNRCsentiment, fakeTweetsNRCsentiment0)
}
fakeTweetsNRCsentiment <- data.frame(id = 0)
for (emotion in nrcEMOTIONS){
fakeTweetsNRCsentiment0 <- inner_join(fakeTweetsTOKENS, filter(nrcWORDS, sentiment == emotion))
fakeTweetsNRCsentiment <- full_join(fakeTweetsNRCsentiment, fakeTweetsNRCsentiment0)
}
View(fakeTweetsNRCsentiment)
fakeTweetsNRCsentiment <- data.frame(fakeTweetsNRCsentiment[-1,])
attach(fakeTweetsNRCsentiment)
fakeNRCscoredTweets <- data.frame(table(id, sentiment), realFAKEcat = "fake")
detach(fakeTweetsNRCsentiment)
library(plyr)
library(dplyr)
ddply(fakeTweetsNRCsentiment, .(id, sentiments), summarize, nrow)
ddply(fakeTweetsNRCsentiment, .(fakeTweetsNRCsentiment$id, fakeTweetsNRCsentiment$sentiments), summarize, nrow)
ddply(fakeTweetsNRCsentiment, .(fakeTweetsNRCsentiment$id, fakeTweetsNRCsentiment$sentiments), summarize, count)
ddply(fakeTweetsNRCsentiment, .(id), summarize, count)
attach(fakeTweetsNRCsentiment)
fakeNRCscoredTweets <- data.frame(table(id, sentiment))
detach(fakeTweetsNRCsentiment)
fakeNRCscoredTweets
View(nrcWORDS)
fileName
filename2 = datasetsFULLcsv/socialSpambots1/tweets.csv
filename2 = 'datasetsFULLcsv/socialSpambots1/tweets.csv'
filename2 = 'datasetsFULLcsv/socialSpambots2/tweets.csv'
social2csv = read.csv(filename2)
filename2 = 'datasetsFULLcsv/socialSpambots2csv/tweets.csv'
social2csv = read.csv(filename2)
social2csv[1,]
filename2 = 'datasetsFULLcsv/socialSpambots3csv/tweets.csv'
social3csv = read.csv(filename2)
head(social3csv)
filename2 = 'datasetsFULLcsv/traditionalSpambots1csv/tweets.csv'
trad1csv = read.csv(filename2)
head(trad1csv)
fakeCSV = read.csv(fileName0)
fakeTweets <- data.frame(userID = fakeCSV$user_id, id = fakeCSV$id, text = fakeCSV$text)
for (filename in fileNames) {
temp0 = read.csv(filename)
#fakeCSV <- rbind(fakeCSV, temp0)
temp <- data.frame(userID = temp0$user_id, id = temp0$id, text = temp0$text)
fakeTweets <- rbind(fakeTweets, temp)
}
fileName0 = 'datasetsFULLcsv/fakeFollowersCSV/tweets.csv'
fileNames = c('datasetsFULLcsv/socialSpambots1csv/tweets.csv', 'datasetsFULLcsv/socialSpambots2csv/tweets.csv', 'datasetsFULLcsv/socialSpambots3csv/tweets.csv', 'datasetsFULLcsv/traditionalSpambots1csv/tweets.csv')
setwd("~/Desktop/IR-Project/FakeProject-data")
fakeCSV = read.csv(fileName0)
fakeTweets <- data.frame(userID = fakeCSV$user_id, id = fakeCSV$id, text = fakeCSV$text)
for (filename in fileNames) {
temp0 = read.csv(filename)
#fakeCSV <- rbind(fakeCSV, temp0)
temp <- data.frame(userID = temp0$user_id, id = temp0$id, text = temp0$text)
fakeTweets <- rbind(fakeTweets, temp)
}
# remove web URLs
fakeTweets <- data.frame(userID = fakeTweets$userID, id = fakeTweets$id, text = gsub("http[[:alnum:][:punct:]]*", "", fakeTweets$text))
# remove twitter handles (@<username>)
fakeTweets <- data.frame(userID = fakeTweets$userID, id = fakeTweets$id, text = gsub("#[[:alnum:][:punct:]]*", "", fakeTweets$text))
# remove hashtags (#<hashtag name>)
fakeTweets <- data.frame(userID = fakeTweets$userID, id = fakeTweets$id, text = gsub("@[[:alnum:][:punct:]]*", "", fakeTweets$text))
# remove punctuation
fakeTweets <- data.frame(userID = fakeTweets$userID, id = fakeTweets$id, text = gsub('[[:punct:] ]+', ' ', fakeTweets$text))
# remove numbers
fakeTweets <- data.frame(userID = fakeTweets$userID, id = fakeTweets$id, text = gsub("[0-9]", "", fakeTweets$text))
# convert to lowercase
fakeTweets <- data.frame(userID = fakeTweets$userID, id = fakeTweets$id, text = tolower(fakeTweets$text))
library(dplyr)
library(tidytext)
fakeTweets <- data_frame(userID = fakeTweets$userID, id = fakeTweets$id, text = as.character(fakeTweets$text))
fakeTweetsTOKENS <- fakeTweets %>%
unnest_tokens(word, text)
data(stop_words)
fakeTweetsTOKENS <- fakeTweetsTOKENS %>%
anti_join(stop_words)
nrcWORDS <- get_sentiments("nrc")
nrcEMOTIONS <- unique(nrcWORDS$sentiment)
fakeTweetsNRCsentiment <- data.frame(id = 0)
for (emotion in nrcEMOTIONS){
fakeTweetsNRCsentiment0 <- inner_join(fakeTweetsTOKENS, filter(nrcWORDS, sentiment == emotion))
fakeTweetsNRCsentiment <- full_join(fakeTweetsNRCsentiment, fakeTweetsNRCsentiment0)
}
fakeTweetsNRCsentiment <- data.frame(fakeTweetsNRCsentiment[-1,])
#fakeTweetsNRCsentiment
attach(fakeTweetsNRCsentiment)
fakeNRCscoredTweets <- data.frame(table(id, sentiment), realFAKEcat = "fake")
detach(fakeTweetsNRCsentiment)
nrcEMOTIONS
filter(fakeNRCscoredTweets, fakeNRCscoredTweets$sentiment = "trust")
trustScores <- filter(fakeNRCscoredTweets, sentiment = "trust")
trustScores <- filter(fakeNRCscoredTweets, sentiment == "trust")
nrows(fakeTweets)
nrow(fakeTweets)
nrow(trustScores)
head(trustScores)
joyScores <- filter(fakeNRCscoredTweets, sentiment == "joy")
nrow(joyScores)
testA <- cbind(trustScores, joyScores)
head(testA)
trustScores <- data.frame(id = filter(fakeNRCscoredTweets$id, sentiment == "trust"), trust = filter(fakeNRCscoredTweets$Freq, sentiment == "trust", realFAKEcat = "false"))
trustScores <- data.frame(id = filter(fakeNRCscoredTweets, sentiment == "trust")$id, trust = filter(fakeNRCscoredTweets, sentiment == "trust")$Freq, realFAKEcat = "false")
head(trustScores)
joyScores <- data.frame(id = filter(fakeNRCscoredTweets, sentiment == "joy")$id, trust = filter(fakeNRCscoredTweets, sentiment == "joy")$Freq, realFAKEcat = "false")
nrow(trustScores)
nrow(joyScores)
testB <- full_join(trustScores, joyScores)
joyScores <- data.frame(id = filter(fakeNRCscoredTweets, sentiment == "joy")$id, joy = filter(fakeNRCscoredTweets, sentiment == "joy")$Freq, realFAKEcat = "false")
testB <- full_join(trustScores, joyScores)
head(testB)
nrcEMOTIONS
nrcEMOTscores = data.frame(id = 0)
for (emot in nrcEMOTIONS) {}
for (emot in nrcEMOTIONS) {
temp <- data.frame(id = filter(fakeNRCscoredTweets, sentiment == emot)$id, emot = filter(fakeNRCscoredTweets, sentiment == emot)$Freq)
nrcEMOTscores <- full_join(nrcEMOTscores, temp)
}
nrcEMOTscores <- data.frame(id = 0)
for (emot in nrcEMOTIONS) {
temp <- data.frame(id = filter(fakeNRCscoredTweets, sentiment == emot)$id, emot = filter(fakeNRCscoredTweets, sentiment == emot)$Freq)
nrcEMOTscores <- full_join(nrcEMOTscores, temp)
}
nrcEMOTscores <- data.frame()
for (emot in nrcEMOTIONS) {
temp <- data.frame(id = filter(fakeNRCscoredTweets, sentiment == emot)$id, emot = filter(fakeNRCscoredTweets, sentiment == emot)$Freq)
nrcEMOTscores <- full_join(nrcEMOTscores, temp)
}
head(temp)
temp
for (emot in nrcEMOTIONS) {
temp <- data.frame(id = filter(fakeNRCscoredTweets, sentiment == emot)$id, print(emot) = filter(fakeNRCscoredTweets, sentiment == emot)$Freq)
nrcEMOTscores <- full_join(nrcEMOTscores, temp)
}
nrcEMOTscores <- data.frame(id = filter(fakeNRCscoredTweets, sentiment == emot)$id)
nrow(nrcEMOTscores)
for (emot in nrcEMOTIONS) {
temp <- data.frame(id = filter(fakeNRCscoredTweets, sentiment == emot)$id, print(emot) = filter(fakeNRCscoredTweets, sentiment == emot)$Freq)
nrcEMOTscores <- full_join(nrcEMOTscores, temp)
}
for (emot in nrcEMOTIONS) {
temp <- data.frame(id = filter(fakeNRCscoredTweets, sentiment == emot)$id, show(emot) = filter(fakeNRCscoredTweets, sentiment == emot)$Freq)
nrcEMOTscores <- full_join(nrcEMOTscores, temp)
}
for (emot in nrcEMOTIONS) {
temp <- data.frame(id = filter(fakeNRCscoredTweets, sentiment == emot)$id, filter(fakeNRCscoredTweets, sentiment == emot)$Freq)
nrcEMOTscores <- full_join(nrcEMOTscores, temp)
}
heat(nrcEMOTscores)
head(nrcEMOTscores)
trustScores <- data.frame(id = filter(fakeNRCscoredTweets, sentiment == "trust")$id, trust = filter(fakeNRCscoredTweets, sentiment == "trust")$Freq)
nrcEMOTIONS
nrcEMOTIONS <- data.frame(emotion = nrcEMOTIONS)
nrcEMOTscores <- data.frame(id = filter(fakeNRCscoredTweets, sentiment == emot)$id)
nrow(nrcEMOTscores)
for (emot in nrcEMOTIONS) {
temp <- data.frame(id = filter(fakeNRCscoredTweets, sentiment == emot)$id, show(emot) = filter(fakeNRCscoredTweets, sentiment == emot)$Freq)
nrcEMOTscores <- full_join(nrcEMOTscores, temp)
}
nrcEMOTscores <- data.frame(id = filter(fakeNRCscoredTweets, sentiment == emot)$id)
for (emot in nrcEMOTIONS) {
temp <- data.frame(id = filter(fakeNRCscoredTweets, sentiment == emot)$id, emot = filter(fakeNRCscoredTweets, sentiment == emot)$Freq)
nrcEMOTscores <- full_join(nrcEMOTscores, temp)
}
head(nrcEMOTscores)
trustScores <- data.frame(id = filter(fakeNRCscoredTweets, sentiment == "trust")$id, trust = filter(fakeNRCscoredTweets, sentiment == "trust")$Freq)
nrcEMOTIONS
fearScores <- data.frame(id = filter(fakeNRCscoredTweets, sentiment == "fear")$id, trust = filter(fakeNRCscoredTweets, sentiment == "fear")$Freq)
negScores <- data.frame(id = filter(fakeNRCscoredTweets, sentiment == "negative")$id, trust = filter(fakeNRCscoredTweets, sentiment == "negative")$Freq)
sadnessScores <- data.frame(id = filter(fakeNRCscoredTweets, sentiment == "sadness")$id, trust = filter(fakeNRCscoredTweets, sentiment == "sadness")$Freq)
sadnessScores <- data.frame(id = filter(fakeNRCscoredTweets, sentiment == "sadness")$id, sadness = filter(fakeNRCscoredTweets, sentiment == "sadness")$Freq)
fearScores <- data.frame(id = filter(fakeNRCscoredTweets, sentiment == "fear")$id, fear = filter(fakeNRCscoredTweets, sentiment == "fear")$Freq)
negScores <- data.frame(id = filter(fakeNRCscoredTweets, sentiment == "negative")$id, begative = filter(fakeNRCscoredTweets, sentiment == "negative")$Freq)
negScores <- data.frame(id = filter(fakeNRCscoredTweets, sentiment == "negative")$id, negative = filter(fakeNRCscoredTweets, sentiment == "negative")$Freq)
angerScores <- data.frame(id = filter(fakeNRCscoredTweets, sentiment == "anger")$id, anger = filter(fakeNRCscoredTweets, sentiment == "anger")$Freq)
surpriseScores <- data.frame(id = filter(fakeNRCscoredTweets, sentiment == "surprise")$id, surprise = filter(fakeNRCscoredTweets, sentiment == "surprise")$Freq)
posScores <- data.frame(id = filter(fakeNRCscoredTweets, sentiment == "positive")$id, positive = filter(fakeNRCscoredTweets, sentiment == "positive")$Freq)
disgustScores <- data.frame(id = filter(fakeNRCscoredTweets, sentiment == "disgust")$id, disgust = filter(fakeNRCscoredTweets, sentiment == "disgust")$Freq)
joyScores <- data.frame(id = filter(fakeNRCscoredTweets, sentiment == "joy")$id, joy = filter(fakeNRCscoredTweets, sentiment == "joy")$Freq)
anticipationScores <- data.frame(id = filter(fakeNRCscoredTweets, sentiment == "anticipation")$id, anticipation = filter(fakeNRCscoredTweets, sentiment == "anticipation")$Freq)
testC <- full_join(trustScores, full_join(fearScores, full_join(negScores, full_join(sadnessScores, full_join(angerScores, full_join(surpriseScores, full_join(posScores, full_join(disgustScores, full_join(joyScores, anticipationScores))))))))
)
head(testC)
nrow(testC)
testD <- data.frame(testC, realFAKEcat = "fake")
head(testD)
View(testC)
View(testC)
View(testB)
View(testB)
View(testB)
View(testB)
View(testB)
View(testB)
View(testB)
View(testB)
View(testB)
View(testB)
View(testB)
