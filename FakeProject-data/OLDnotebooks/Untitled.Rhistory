iris[which(iris$Species=="Versicolor")]
iris[which(iris$Species=="versicolor")]
iris[which(iris$species=="versicolor")]
iris[which(iris$species=='versicolor')]
subset(iris, species='versicolor')
iris[which(iris$Species=='versicolor')]
pnorm(1,0,1)
for(n in c(0,1,2,3,4,5,6,7)) {for(m in 0:n) {x = sum(x,  pnorm(m, 37.5, 17.12) * pnorm(n-m, 37.5, 17.12))}}
x
x=0
for(n in c(0,1,2,3,4,5,6,7)) {for(m in 0:n) {x = sum(x,  pnorm(m, 37.5, 17.12) * pnorm(n-m, 37.5, 17.12))}}
x
x=0
for(n in c(0,1,2,3,4,5,6,7)) {for(m in 0:n) {x = sum(x,  pnorm(m, 37.5, 17.12) * pnorm(n-m, 37.5, 17.12))}}
1-x
x=0
ppois()
lambda=3
x=0
for(n in c(0,1,2,3,4,5,6,7)) {for(m in 0:n) {x = sum(x,  ppois(m, lambda) * pnorm(n-m, lambda))}}
1-x
1-x
x
for(n in c(0,1,2,3,4,5,6,7)) {for(m in 0:n) {x = sum(x,  ppois(m, lambda) * ppois(n-m, lambda))}}
x=0
for(n in c(0,1,2,3,4,5,6,7)) {for(m in 0:n) {x = sum(x,  ppois(m, lambda) * ppois(n-m, lambda))}}
1-x
> 1-pnorm(5,0,1)
1-pnorm(5,0,1)
pnorm(1,0,1)
pnorm(5,0,1, lower.tail = FALSE)
pnorm(5,0,1, log.p = FALSE, lower.tail = FALSE)
pnorm(1,0,1, log.p = FALSE, lower.tail = FALSE)
x=0
for(n in c(0,1,2,3,4,5,6,7)) {for(m in 0:n) {x = sum(x,  ppois(m, lambda) * ppois(n-m, lambda))}}
lambda=3
for(n in c(0,1,2,3,4,5,6,7)) {for(m in 0:n) {x = sum(x,  ppois(m, lambda) * ppois(n-m, lambda))}}
x
for(n in c(0,1,2,3,4,5,6,7)) {for(m in 0:n) {x = sum(x,  ppois(m, lambda) * ppois(m-n, lambda))}}
x=0
for(n in c(0,1,2,3,4,5,6,7)) {for(m in 0:n) {x = sum(x,  ppois(m, lambda) * ppois(m-n, lambda))}}
x
for( n in c(0,1,2,3,4,5,6,7) {x = sum(x, ppois(n, lambda) * ppois(7-n, lambda))})
for( n in c(0,1,2,3,4,5,6,7) {x = sum(x, (ppois(n, lambda) * ppois(7-n, lambda)) )})
for( n in c(0,1,2,3,4,5,6,7)) {x = sum(x, (ppois(n, lambda) * ppois(7-n, lambda)) )}
x=0
for( n in c(0,1,2,3,4,5,6,7)) {x = sum(x, (ppois(n, lambda) * ppois(7-n, lambda)) )}
x=0
for(n in c(0,1,2,3,4,5,6,7)) {for(m in 0:n) {x = sum(x,  ppois(m, lambda) * ppois(m-n, lambda))}}
x
lambda=3
x=0
for(n in c(0,1,2,3,4,5,6,7)) {for(m in 0:n) {x = sum(x,  ppois(m, lambda) * ppois(m-n, lambda))}}
x
1-pnorm(5,0,1, lower.tail = FALSE)
pnorm(5,0,1)
pnorm(5, 0, 1, lower.tail = FALSE)
1-pnorm(5,0,1)
pNorm(12,20,10)
pnorm(12,20,10)
pbinom(9,10,0.8)
pnorm(0.9,0,1)
1-pnorm(0.9,0,1)
pnorm(0.9, 0, 1, lower.tail = FALSE)
iris[iris.Speices == 'versicolor']
iris
iris[iris$Speices == 'versicolor']
a <- iris[iris$Speices == 'versicolor']
a
a <- iris[iris$Speices == 'versicolor',]
a
clear(a)
View(a)
a=0
a <- iris[iris$Speices == 'versicolor',]
subset(iris, Species == 'versicolor')
a <- subset(iris, Species == 'versicolor')
qbinom(0.5, 27, 0.7)
pbinom(19, 27, 0.7)
pbinom(1, 27, 0.7)
pbinom(18, 27, 0.7)
0.5-pbinom(19, 27, 0.7)
0.5-pbinom(18, 27, 0.7)
qbinom(0.10, 180, 0.18)
pbinom(qbinom(0.10, 180, 0.18), 180, 0.18)
pbinom(180, 180, 0.18)
pbinom(18, 180, 0.18)
1-pbinom(18, 180, 0.18)
pbinom(7500, 5000, 1/5000)
pbinom(1, 5000, 1/5000)
1-pbinom(0, 5000, 1/5000)
1-pbinom(0, 5000, 1/5000)
pbinom(0, 5000, 1/5000)
1-pbinom(18, 180, 0.18)
pbinom(18, 180, 0.18)
ppois(18,18)
ppois(18,180*0.18)
ppois(17,180*0.18)
ppois(179,180*0.18)
ppois(19,180*0.18)
ppois(19,180*0.18)-ppois(18,180*0.18)
ppois(18,180*0.18)-ppois(17,180*0.18)
pbinom(18, 180, 0.18)
pbinom(18, 180, 0.18, lower.tail = FALSE)
pbinom(18, 180, 0.18, lower.tail = FALSE)-pbinom(18, 180, 0.18)
qbinom(0.18, 180, 0.18)
qbinom(0.1, 180, 0.18)
dbinom(18, 180, 0.18)
x <- seq(0, 55, length=55)
x
x <- seq(0, 55, length=56)
x
ylab="Density", main="Comparison of t Distributions")
hx <- pbinom(x, 180, 0.18)
hx
plot(x, hx, type="l", lty=2, xlab="x value",
ylab="Density", main="Comparison of t Distributions")
hx <- dbinom(x, 180, 0.18)
hx
plot(x, hx, type="l", lty=2, xlab="x value",
ylab="Density", main="Comparison of t Distributions")
x <- seq(0, 180, length=181)
x
hx <- pbinom(x, 180, 0.18)
plot(x, hx, type="l", lty=2, xlab="x value",
ylab="Density", main="Comparison of t Distributions")
hx <- dbinom(x, 180, 0.18)
plot(x, hx, type="l", lty=2, xlab="x value",
ylab="Density", main="Comparison of t Distributions")
hx <- pbinom(x, 180, 0.18)
gx <- dbinom(x, 180, 0.18)
fx=(hx,gx)
x=c(x,x)
x
fx=c(hx,gx)
fx
plot(x, fx, type="l", lty=2, xlab="x value",
ylab="Density", main="Comparison of t Distributions")
hx <- pbinom(x, 180, 0.18)
gx <- dbinom(x, 180, 0.18)
fx=c(hx,gx)
plot(x, fx, type="l", lty=2, xlab="x value",
ylab="Density", main="Comparison of t Distributions")
x
fx
fx=c(hx,gx)
fx
hx <- pbinom(x, 180, 0.18)
hx
hx <- pbinom(x, 180, 0.18)
ghx
hx
x <- seq(0, 180, length=181)
xx = c(x,x)
hx <- pbinom(x, 180, 0.18)
gx <- dbinom(x, 180, 0.18)
fx=c(hx,gx)
plot(x, fx, type="l", lty=2, xlab="x value",
ylab="Density", main="Comparison of t Distributions")
plot(xx, fx, type="l", lty=2, xlab="x value",
ylab="Density", main="Comparison of t Distributions")
x
xx
fx
plot(x, gx, type="l", lty=2, xlab="x value",
ylab="Density", main="Comparison of t Distributions")
plot(x, hx, type="l", lty=2, xlab="x value",
ylab="Density", main="Comparison of t Distributions")
plot(xx, fx, type="l", lty=2, xlab="x value",
ylab="Density", main="Comparison of t Distributions")
xx
fx
plot(xx, fx, type="l", lty=2, xlab="x value",
ylab="Density", main="Comparison of t Distributions")
qbinom(0.10, 180, 0.18)
pbinom(26, 180, 0.18)
pbinom(18, 180, 0.18)
pbinom(26, 180, 0.18)
pnorm(20,37.5,17.12)
pnorm(10,37.5,17.12)
pnorm(20,37.5,17.12, lower.tail = FALSE)
pnorm(10,37.5,17.12, lower.tail = FALSE)
pnorm(10,37.5,17.12, lower.tail = FALSE)-pnorm(20,37.5,17.12)
1-pnorm(20,37.5,17.12)-pnorm(10,37.5,17.12)
pnorm(20,37.5,17.12)-pnorm(10,37.5,17.12)
100 * ( pnorm(20, 37.5, 17.12) - pnorm( 10, 37.5, 17.12) )
pnorm(10, 37.5, 17.12)
pnorm(10,37.5,17.12, lower.tail = FALSE)
qnorm( pnorm(10, 37.5, 17.12) + 0.50, 37.5, 17.12)
ppois(0, 3)
for(n in c(0,1,2,3,4,5,6,7)) {x = sum(x,  ppois(n, lambda) * ppois(7-n, lambda)}
for(n in c(0,1,2,3,4,5,6,7)) {x = sum(x,  ppois(n, lambda) * ppois(7-n, lambda))}
x=0
lambda=3
for(n in c(0,1,2,3,4,5,6,7)) {x = sum(x,  ppois(n, lambda) * ppois(7-n, lambda))}
x
for(n in c(0,1,2,3,4,5,6,7)) {for(m in 0:n) {x = sum(x,  ppois(m, lambda) * ppois(m-n, lambda))}}
lambda=3
x=0
for(n in c(0,1,2,3,4,5,6,7)) {for(m in 0:n) {x = sum(x,  ppois(m, lambda) * ppois(m-n, lambda))}}
x
subset(iris, Species == 'versicolor')
subset(iris, Species == 'versicolor')> shapiro.test(iris$Sepal.Length)
qqnorm(iris$Sepal.Length)
qqline(iris$Sepal.Length)
qqnorm(iris$Sepal.Length)
qqline(iris$Sepal.Length)
qqline(pnorm())
x <- seq(0, 100, length=101)
qqline(pnorm(x,0,1))
qqline(pnorm(x,0,1))
qqnorm(pnorm(x,0,1))
qqline(pnorm(x,0,1))
shapiro.test(pnorm(x,0,1)
)
shapiro.test(iris$Sepal.Length)
shapiro.test(x)
qqnorm(x)
qqline(x)
qqline(x)
x
data <- rpois(1000, 3)
data
shapiro.test(data)
qqline(data)
qqline(data)
qqnorm(x)
qqnorm(data)
qqnorm(data)
qqline(data)
data <- rpois(1000, 10)
qqnorm(x)
data <- rpois(100, 10)
qqnorm(data)
qqline(data)
data <- rpois(10000, 1000)
qqnorm(data)
qqline(data)
data <- rpois(10, 1000)
qqnorm(data)
qqline(data)
data*data
data
data2=c(data*data*data, data*data, data)
qqnorm(data2)
qqline(data2)
shapiro.test(data2)
shapiro.test(iris$Sepal.Length)
shapiro.test(x)
shapiro.test(data)
> qqnorm(iris$Sepal.Length)
> qqline(iris$Sepal.Length)
qqnorm(iris$Sepal.Length)
qqline(iris$Sepal.Length)
subset(iris, Species == 'versicolor')
dataB <- subset(iris, Species == 'versicolor')
dataB
dataB
dataB <- subset(iris, Species == 'versicolor')
mean(dataB)
mean(dataB$Petal.Length)
sd(dataB$Petal.Length)
quantile(dataB$Petal.Length, 0.25)
qnorm(0.25, mean(dataB$Petal.Length), sd(dataB$Petal.Length))
densityDataB <- density(dataB)
densityDataB <- density(dataB$Petal.Length)
dataC <- subset(iris, Species == 'versicolor')
densityDataC <- density(dataC$Petal.Length)
df <- approxfun(density(dataC$Petal.Length))
df
eval(df,4)
density()
lengthC <- dataC$Petal.Length
length(lengthC[4>=lengthC])/length(lengthC)
dataC <- subset(iris, Species == 'versicolor')
lengthC <- dataC$Petal.Length
length( lengthC[4 >= lengthC] ) / length( lengthC )
mean(lengthC)
sd(lengthC)
pnorm(4, mean(lengthC), sd(lengthC))
dataD <- subset(iris, Species == 'Setosa')
lengthD <- dataD$Petal.Length
length( lengthD[4 >= lengthD] ) / length( lengthD )
View(dataD)
dataD <- subset(iris, Species == 'setosa')
lengthD <- dataD$Petal.Length
length( lengthD[4 >= lengthD] ) / length( lengthD )
View(dataD)
View(dataD)
length( lengthD[4 >= lengthD] ) / length( lengthD )
mean(lengthD)
sd(lengthD)
pnorm(4, mean(lengthD), sd(lengthD))
view(lengthC)
view(lengthC)
View(dataD)
View(dataC)
lengthD <- dataD$Petal.Length
pnorm(4, mean(lengthD), sd(lengthD))
1-pnorm(4, mean(lengthC), sd(lengthC))
1- length( lengthC[4 >= lengthC] ) / length( lengthC )
1-length( lengthD[4 >= lengthD] ) / length( lengthD )
dataC <- subset(iris, Species == 'virginica')
lengthC <- dataC$Petal.Length
length( lengthD[4 >= lengthD] ) / length( lengthD )
View(dataC)
View(dataC)
length( lengthC[4 >= lengthC] ) / length( lengthC )
1-length( lengthC[4 >= lengthC] ) / length( lengthC )
mean(lengthC)
sd(lengthC)
1-pnorm(4, mean(lengthC), sd(lengthC))
dataE <- subset(iris, Species == 'virginica')
View(dataE)
View(dataE)
dataE <- subset(iris, Species == 'virginica')
lenEsep <- dataE$Sepal.Length
widEsep <- dataE$Sepal.Width
length( lenEsep[lenEsep >= 8 | lenEsep <= 4.8] ) / length( lenEsep )
length( lenEsep[lenEsep >= 8 || lenEsep <= 4.8] ) / length( lenEsep )
length( widEsep[widEsep >= 8 || widEsep <= 4.8] ) / length( widEsep )
dataE <- subset(iris, Species == 'virginica')
lenEsep <- dataE$Sepal.Length
widEsep <- dataE$Sepal.Width
length( lenEsep[lenEsep >= 8 || lenEsep <= 4.8] ) / length( lenEsep )
length( widEsep[widEsep >= 8 || widEsep <= 4.8] ) / length( widEsep )
mean(lenEsep)
sd(lenEsep)
pnorm(4.8, mean(lenEsep), sd(lenEsep)) + pnorm(8, mean(lenEsep), sd(lenEsep), lower.tail = FALSE)
mean(widEsep)
sd(widEsep)
pnorm(4.8, mean(widEsep), sd(widEsep)) + pnorm(8, mean(widEsep), sd(widEsep), lower.tail = FALSE)
dataA <- iris$Sepal.Length
data0 <- iris
View(data0)
save.image("~/Documents/School/TCSS 551 - Big Data Analytics/Assignments/Homework-1/iris-Sepal Length data.RData")
write.csv(data0, file="iris-Sepal Length-data.csv")
write.csv(dataA, file="iris-Sepal Length-data.csv")
dataB <- subset(iris, Species == ’versicolor’)
dataB <- subset(iris, Species == ’versicolor’)
iris
dataB <- subset(iris, Species == ’versicolor’)
dataB <- subset(iris, Species == ’versicolor’)
dataB <- subset(iris, Species == ’versicolor’)
dataB <- subset(iris, Species == 'versicolor')
write.csv(dataB$Petal.Length, file="iris-versicolor-Petal Length-data.csv")
dataC <- subset(iris, Species == 'virginica')
write.csv(dataC$Petal.Length, file="iris-virginica-Petal Length-data.csv")
dataD <- subset(iris, Species == 'setosa')
write.csv(dataD$Petal.Length, file="iris-setosa-Petal Length-data.csv")
dataE <- subset(iris, Species == 'virginica')
lenEsep <- dataE$Sepal.Length
widEsep <- dataE$Sepal.Width
write.csv(dataE$Sepal.Length, file="iris-virginica-Sepal Length-data.csv")
write.csv(dataE$Sepal.Width, file="iris-virginica-Sepal Width-data.csv")
load("~/Downloads/blood_pressure.txt")
load("~/Downloads/blood_pressure.txt")
load("~/Downloads/blood_pressure.txt")
read.table("/Users/jamster/Downloads/blood_pressure.txt", header = TRUE) -> abp
head(abp)
View(abp)
View(abp)
abp2 <- abp[-c(2),]
head(abp2)
abline(lm(abp2$blood_pressure~apb2$age))
abline(lm(abp2$blood_pressure~abp2$age))
plot(abp2$blood_pressure~abp2$age)
abline(lm(abp2$blood_pressure~abp2$age))
summary(lm(abp2$blood_pressure~abp2$age))
pnorm(50, 45, 10)
pnorm(50, 55, 40)
clearIO
clear()
qnorm(0.025)
45 qnorm(0.025)
45 + qnorm(0.025)*(10/sqrt(50))
45 - qnorm(0.025)*(10/sqrt(50))
55 + qnorm(0.025)*(40/sqrt(50))
55 - qnorm(0.025)*(40/sqrt(50))
x <- seq(-10,10, length=10001)
fx <- dnorm(x, 45, 10)
gx <- dnorm(x, 55, 40)
plot(x, fx, type = "1")
plot(x, fx, type =1)
plot(x, fx, type="1")
plot(x, fx)
x <- seq(-10,90, length=10001)
fx <- dnorm(x, 45, 10)
gx <- dnorm(x, 55, 40)
plot(x, fx)
plot(x, gx)
plot(x, gx)
3.8 + qnorm(0.025)*(0.26/sqrt(2000))
3.8 - qnorm(0.025)*(0.26/sqrt(2000))
3.8 + qnorm(0.005)*(0.26/sqrt(2000))
3.8 - qnorm(0.005)*(0.26/sqrt(2000))
pnorm(3.785025, 3.8, 0.26) - pnorm(3.814975, 3.8, 0.26)
(qnorm(0.005)*(0.26/sqrt(2000)) - qnorm(0.005)*(0.26/sqrt(2000)))/2
(qnorm(0.005)*(0.26/sqrt(2000)) + qnorm(0.005)*(0.26/sqrt(2000)))/2
-(qnorm(0.005)*(0.26/sqrt(2000)) + qnorm(0.005)*(0.26/sqrt(2000)))/2
pnorm(4, 3.8, 0.26)
(4-3.8)/(0.26/sqrt(2000))
4.762/2
pt(34.4,95)
pt(34.4,99)
pt(34.4,99)
qnorm(34.5)
12.17 + qnorm(0.025)*(4.02/sqrt(37129))
12.17 - qnorm(0.025)*(4.02/sqrt(37129))
12.92 + qnorm(0.025)*(4.12/sqrt(36918))
12.92 - qnorm(0.025)*(4.12/sqrt(36918))
qt(0.025,36918+37129-2)
qt(0.005,36918+37129-2)
2*pt(1-20.5437,36918+37129-2)
2*pt(-20.5437,36918+37129-2)
2*pt(20.5437-1,36918+37129-2)
2*pt(-20.5437,36918+37129-2)
2*pt(1-20.5437,36918+37129-2)
mydata = read.table("clipboard", header=TRUE, sep="\t")
"mydata = read.table("/Users/jamster/Downloads/MidTerm-Prob5-data.txt", header=TRUE, sep="\t")
mydata = read.table("/Users/jamster/Downloads/MidTerm-Prob5-data.txt", header=TRUE, sep="\t")
View(mydata)
View(mydata)
modelA <- lm(mydata$Length~mydata$Pollutant.A)
summary(modelA)
modelB <- lm(mydata$Length~mydata$Pollutant.B)
summary(modelB)
plot(mydata$Pollutant.A,mydata$Length)
plot(mydata$Length,mydata$Pollutant.A)
plot(mydata$Length,mydata$Pollutant.B)
myDataA <- mydata[ -c()]
mydata = read.table("/Users/jamster/Downloads/MidTerm-Prob5-data.txt", header=TRUE, sep="\t")
modelA <- lm(mydata$Length~mydata$Pollutant.A)
modelB <- lm(mydata$Length~mydata$Pollutant.B)
summary(modelA)
summary(modelB)
plot(mydata$Length,mydata$Pollutant.A)
plot(mydata$Pollutant.A,mydata$Length)
plot(mydata$Pollutant.B,mydata$Length)
csvIN = csv.read("/Users/jamster/Downloads/tweets.csv")
csvIN = read.csv("/Users/jamster/Downloads/tweets.csv")
genuine <- csvIN$text
test <- genuine[2]
test <- genuine[c(2_]
test <- genuine[c(2)]
test = genuine[c(2)]
View(csvIN)
load("/Users/jamster/Desktop/temp.RData")
setwd("~/Desktop/IR-Project/FakeProject-data")
fileName = 'datasetsFULLcsv/fakeFollowersCSV/tweets.csv'
fakeCSV = read.csv(fileName)
fakeTweets <- data.frame(text = fakeCSV$text)
# remove web URLs
fakeTweets <- data.frame(text = gsub("http[[:alnum:][:punct:]]*", "", fakeTweets$text))
# remove twitter handles (@<username>)
fakeTweets <- data.frame(text = gsub("#[[:alnum:][:punct:]]*", "", fakeTweets$text))
# remove hashtags (#<hashtag name>)
fakeTweets <- data.frame(text = gsub("@[[:alnum:][:punct:]]*", "", fakeTweets$text))
# remove punctuation
fakeTweets <- data.frame(text = gsub('[[:punct:] ]+', ' ', fakeTweets$text))
# remove numbers
fakeTweets <- data.frame(text = gsub("[0-9]", "", fakeTweets$text))
# convert to lowercase
fakeTweets <- data.frame(text = tolower(fakeTweets$text))
View(fakeCSV)
state.x77
state.region
fakeTweets <- data.frame(userID = fakeCSV$user_id, id = fakeCSV$id, text = fakeCSV$text)
# remove web URLs
fakeTweets <- data.frame(userID = fakeTweets$userID, id = fakeTweets$id, text = gsub("http[[:alnum:][:punct:]]*", "", fakeTweets$text))
# remove twitter handles (@<username>)
fakeTweets <- data.frame(userID = fakeTweets$userID, id = fakeTweets$id, text = gsub("#[[:alnum:][:punct:]]*", "", fakeTweets$text))
# remove hashtags (#<hashtag name>)
fakeTweets <- data.frame(userID = fakeTweets$userID, id = fakeTweets$id, text = gsub("@[[:alnum:][:punct:]]*", "", fakeTweets$text))
# remove punctuation
fakeTweets <- data.frame(userID = fakeTweets$userID, id = fakeTweets$id, text = gsub('[[:punct:] ]+', ' ', fakeTweets$text))
# remove numbers
fakeTweets <- data.frame(userID = fakeTweets$userID, id = fakeTweets$id, text = gsub("[0-9]", "", fakeTweets$text))
# convert to lowercase
fakeTweets <- data.frame(userID = fakeTweets$userID, id = fakeTweets$id, text = tolower(fakeTweets$text))
library(dplyr)
library(tidytext)
fakeTweets <- data_frame(userID = fakeTweets$userID, id = fakeTweets$id, text = as.character(fakeTweets$text))
fakeTweetsTOKENS <- fakeTweets %>%
unnest_tokens(word, text)
data(stop_words)
fakeTweetsTOKENS <- fakeTweetsTOKENS %>%
anti_join(stop_words)
nrcWORDS <- get_sentiments("nrc")
length(unique(nrcWORDS$sentiment))
nrcEMOTIONS <- unique(nrcWORDS$sentiment)
nrcEMOTIONS
fakeTweetsNRCsentiment <- data.frame()
for (emotion in nrcEMOTIONS){
fakeTweetsNRCsentiment0 <- fakeTweetsTOKENS %>%
inner_join(filter(nrcWORDS, sentiment == emotion))
rbind(fakeTweetsNRCsentiment, fakeTweetsNRCsentiment0)
}
fakeTweetsNRCsentiment
fakeTweetsNRCsentiment <- data.frame(id = 0)
for (emotion in nrcEMOTIONS){
fakeTweetsNRCsentiment0 <- inner_join(fakeTweetsTOKENS, filter(nrcWORDS, sentiment == emotion))
fakeTweetsNRCsentiment <- full_join(fakeTweetsNRCsentiment, fakeTweetsNRCsentiment0)
}
fakeTweetsNRCsentiment
set.seed(123)
index <- sample(1:nrow(fakeTweetsNRCsentiment), 5000)
test <- fakeTweetsNRCsentiment[index,]
aggregate(text, list = c(id = test$id, sentiment = test$sentiment), nrow)
aggregate(text, list = c(id = test$id, sentiment = test$sentiment), FUN = nrow)
aggregate(text, by list = c(id = test$id, sentiment = test$sentiment), FUN = nrow)
savehistory("~/Desktop/IR-Project/FakeProject-data/Untitled.Rhistory")
